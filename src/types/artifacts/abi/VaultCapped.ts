/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultCappedInterface extends utils.Interface {
  functions: {
    "BASE_UNIT()": FunctionFragment;
    "BLOCKS_PER_YEAR()": FunctionFragment;
    "UNDERLYING_CAP()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "auth()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "batchBurnBalance()": FunctionFragment;
    "batchBurnRound()": FunctionFragment;
    "batchBurns(uint256)": FunctionFragment;
    "burningFeePercent()": FunctionFragment;
    "burningFeeReceiver()": FunctionFragment;
    "calculateShares(uint256)": FunctionFragment;
    "calculateUnderlying(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositIntoStrategy(address,uint256)": FunctionFragment;
    "distrustStrategy(address)": FunctionFragment;
    "enterBatchBurn(uint256)": FunctionFragment;
    "estimatedReturn()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "execBatchBurn()": FunctionFragment;
    "exitBatchBurn()": FunctionFragment;
    "getStrategyData(address)": FunctionFragment;
    "getWithdrawalQueue()": FunctionFragment;
    "harvest(address[])": FunctionFragment;
    "harvestDelay()": FunctionFragment;
    "harvestFeePercent()": FunctionFragment;
    "harvestFeeReceiver()": FunctionFragment;
    "harvestWindow()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "lastHarvest()": FunctionFragment;
    "lastHarvestExchangeRate()": FunctionFragment;
    "lastHarvestIntervalInBlocks()": FunctionFragment;
    "lastHarvestWindowStart()": FunctionFragment;
    "lastHarvestWindowStartBlock()": FunctionFragment;
    "lockedProfit()": FunctionFragment;
    "maxLockedProfit()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextHarvestDelay()": FunctionFragment;
    "paused()": FunctionFragment;
    "setAuth(address)": FunctionFragment;
    "setBatchedBurningFeePercent(uint256)": FunctionFragment;
    "setBlocksPerYear(uint256)": FunctionFragment;
    "setBurningFeeReceiver(address)": FunctionFragment;
    "setHarvestDelay(uint64)": FunctionFragment;
    "setHarvestFeePercent(uint256)": FunctionFragment;
    "setHarvestFeeReceiver(address)": FunctionFragment;
    "setHarvestWindow(uint128)": FunctionFragment;
    "setUnderlyingCap(uint256)": FunctionFragment;
    "setWithdrawalQueue(address[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFloat()": FunctionFragment;
    "totalStrategyHoldings()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalUnderlying()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "triggerPause()": FunctionFragment;
    "trustStrategy(address)": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingDecimals()": FunctionFragment;
    "userBatchBurnReceipts(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawFromStrategy(address,uint256)": FunctionFragment;
    "withdrawalQueue(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BASE_UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "BLOCKS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNDERLYING_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "auth", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurnBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurnRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBurns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burningFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burningFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUnderlying",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIntoStrategy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distrustStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterBatchBurn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedReturn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execBatchBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitBatchBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalQueue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "harvestDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvestExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvestIntervalInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvestWindowStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvestWindowStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLockedProfit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextHarvestDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAuth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBatchedBurningFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlocksPerYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurningFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnderlyingCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalQueue",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalFloat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStrategyHoldings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustStrategy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBatchBurnReceipts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStrategy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalQueue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BLOCKS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNDERLYING_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBurnBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBurnRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchBurns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burningFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burningFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositIntoStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distrustStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterBatchBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execBatchBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitBatchBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestIntervalInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestWindowStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvestWindowStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLockedProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextHarvestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBatchedBurningFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlocksPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurningFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnderlyingCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFloat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStrategyHoldings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBatchBurnReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalQueue",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthUpdated(address)": EventFragment;
    "BurningFeePercentUpdated(uint256)": EventFragment;
    "BurningFeeReceiverUpdated(address)": EventFragment;
    "ChangeUnderlyingCap(uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "EnterBatchBurn(uint256,address,uint256)": EventFragment;
    "ExecuteBatchBurn(uint256,address,uint256,uint256)": EventFragment;
    "ExitBatchBurn(uint256,address,uint256)": EventFragment;
    "Harvest(address,address[])": EventFragment;
    "HarvestDelayUpdateScheduled(uint64)": EventFragment;
    "HarvestDelayUpdated(address,uint64)": EventFragment;
    "HarvestFeePercentUpdated(uint256)": EventFragment;
    "HarvestFeeReceiverUpdated(address)": EventFragment;
    "HarvestWindowUpdated(uint128)": EventFragment;
    "Paused(address)": EventFragment;
    "StrategyDeposit(address,address,uint256)": EventFragment;
    "StrategyDistrusted(address)": EventFragment;
    "StrategyTrusted(address)": EventFragment;
    "StrategyWithdrawal(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalQueueSet(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurningFeePercentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BurningFeeReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeUnderlyingCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterBatchBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteBatchBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitBatchBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "HarvestDelayUpdateScheduled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestDelayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestFeePercentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestFeeReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestWindowUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyDistrusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyTrusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalQueueSet"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type AuthUpdatedEvent = TypedEvent<[string], { newAuth: string }>;

export type AuthUpdatedEventFilter = TypedEventFilter<AuthUpdatedEvent>;

export type BurningFeePercentUpdatedEvent = TypedEvent<
  [BigNumber],
  { newFeePercent: BigNumber }
>;

export type BurningFeePercentUpdatedEventFilter =
  TypedEventFilter<BurningFeePercentUpdatedEvent>;

export type BurningFeeReceiverUpdatedEvent = TypedEvent<
  [string],
  { receiver: string }
>;

export type BurningFeeReceiverUpdatedEventFilter =
  TypedEventFilter<BurningFeeReceiverUpdatedEvent>;

export type ChangeUnderlyingCapEvent = TypedEvent<
  [BigNumber],
  { newCap: BigNumber }
>;

export type ChangeUnderlyingCapEventFilter =
  TypedEventFilter<ChangeUnderlyingCapEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EnterBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { round: BigNumber; account: string; amount: BigNumber }
>;

export type EnterBatchBurnEventFilter = TypedEventFilter<EnterBatchBurnEvent>;

export type ExecuteBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  { round: BigNumber; executor: string; shares: BigNumber; amount: BigNumber }
>;

export type ExecuteBatchBurnEventFilter =
  TypedEventFilter<ExecuteBatchBurnEvent>;

export type ExitBatchBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { round: BigNumber; account: string; amount: BigNumber }
>;

export type ExitBatchBurnEventFilter = TypedEventFilter<ExitBatchBurnEvent>;

export type HarvestEvent = TypedEvent<
  [string, string[]],
  { account: string; strategies: string[] }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type HarvestDelayUpdateScheduledEvent = TypedEvent<
  [BigNumber],
  { newHarvestDelay: BigNumber }
>;

export type HarvestDelayUpdateScheduledEventFilter =
  TypedEventFilter<HarvestDelayUpdateScheduledEvent>;

export type HarvestDelayUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { account: string; newHarvestDelay: BigNumber }
>;

export type HarvestDelayUpdatedEventFilter =
  TypedEventFilter<HarvestDelayUpdatedEvent>;

export type HarvestFeePercentUpdatedEvent = TypedEvent<
  [BigNumber],
  { newFeePercent: BigNumber }
>;

export type HarvestFeePercentUpdatedEventFilter =
  TypedEventFilter<HarvestFeePercentUpdatedEvent>;

export type HarvestFeeReceiverUpdatedEvent = TypedEvent<
  [string],
  { receiver: string }
>;

export type HarvestFeeReceiverUpdatedEventFilter =
  TypedEventFilter<HarvestFeeReceiverUpdatedEvent>;

export type HarvestWindowUpdatedEvent = TypedEvent<
  [BigNumber],
  { newHarvestWindow: BigNumber }
>;

export type HarvestWindowUpdatedEventFilter =
  TypedEventFilter<HarvestWindowUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type StrategyDepositEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; strategy: string; underlyingAmount: BigNumber }
>;

export type StrategyDepositEventFilter = TypedEventFilter<StrategyDepositEvent>;

export type StrategyDistrustedEvent = TypedEvent<
  [string],
  { strategy: string }
>;

export type StrategyDistrustedEventFilter =
  TypedEventFilter<StrategyDistrustedEvent>;

export type StrategyTrustedEvent = TypedEvent<[string], { strategy: string }>;

export type StrategyTrustedEventFilter = TypedEventFilter<StrategyTrustedEvent>;

export type StrategyWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; strategy: string; underlyingAmount: BigNumber }
>;

export type StrategyWithdrawalEventFilter =
  TypedEventFilter<StrategyWithdrawalEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawalQueueSetEvent = TypedEvent<
  [string[]],
  { replacedWithdrawalQueue: string[] }
>;

export type WithdrawalQueueSetEventFilter =
  TypedEventFilter<WithdrawalQueueSetEvent>;

export interface VaultCapped extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultCappedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNDERLYING_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auth(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchBurnBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurnRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    burningFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimatedReturn(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { estimate: BigNumber }>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<[string[]]>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    harvestWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestIntervalInBlocks(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastHarvestWindowStartBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLockedProfit(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchedBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnderlyingCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalFloat(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnderlying(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalUnderlyingHeld: BigNumber }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingDecimals(overrides?: CallOverrides): Promise<[number]>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  UNDERLYING_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auth(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfUnderlying(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

  batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

  batchBurns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalShares: BigNumber;
      amountPerShare: BigNumber;
    }
  >;

  burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  burningFeeReceiver(overrides?: CallOverrides): Promise<string>;

  calculateShares(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnderlying(
    sharesAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    to: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositIntoStrategy(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distrustStrategy(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterBatchBurn(
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  execBatchBurn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitBatchBurn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStrategyData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

  getWithdrawalQueue(overrides?: CallOverrides): Promise<string[]>;

  harvest(
    strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  harvestFeeReceiver(overrides?: CallOverrides): Promise<string>;

  harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    underlying_: string,
    auth_: string,
    harvestFeeReceiver_: string,
    burnFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

  lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setAuth(
    newAuth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchedBurningFeePercent(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlocksPerYear(
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBurningFeeReceiver(
    burningFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestDelay(
    newHarvestDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestFeePercent(
    newFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestFeeReceiver(
    harvestFeeReceiver_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHarvestWindow(
    newHarvestWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnderlyingCap(
    newCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalQueue(
    newQueue: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

  totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerPause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustStrategy(
    strategy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingDecimals(overrides?: CallOverrides): Promise<number>;

  userBatchBurnReceipts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }>;

  version(overrides?: CallOverrides): Promise<string>;

  withdrawFromStrategy(
    strategy: string,
    underlyingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalQueue(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    auth(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalShares: BigNumber;
        amountPerShare: BigNumber;
      }
    >;

    burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<string>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distrustStrategy(
      strategy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execBatchBurn(overrides?: CallOverrides): Promise<void>;

    exitBatchBurn(overrides?: CallOverrides): Promise<void>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { trusted: boolean; balance: BigNumber }>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<string[]>;

    harvest(strategies: string[], overrides?: CallOverrides): Promise<void>;

    harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<string>;

    harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setAuth(newAuth: string, overrides?: CallOverrides): Promise<void>;

    setBatchedBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnderlyingCap(
      newCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    triggerPause(overrides?: CallOverrides): Promise<void>;

    trustStrategy(strategy: string, overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingDecimals(overrides?: CallOverrides): Promise<number>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { round: BigNumber; shares: BigNumber }
    >;

    version(overrides?: CallOverrides): Promise<string>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "AuthUpdated(address)"(newAuth?: null): AuthUpdatedEventFilter;
    AuthUpdated(newAuth?: null): AuthUpdatedEventFilter;

    "BurningFeePercentUpdated(uint256)"(
      newFeePercent?: null
    ): BurningFeePercentUpdatedEventFilter;
    BurningFeePercentUpdated(
      newFeePercent?: null
    ): BurningFeePercentUpdatedEventFilter;

    "BurningFeeReceiverUpdated(address)"(
      receiver?: string | null
    ): BurningFeeReceiverUpdatedEventFilter;
    BurningFeeReceiverUpdated(
      receiver?: string | null
    ): BurningFeeReceiverUpdatedEventFilter;

    "ChangeUnderlyingCap(uint256)"(
      newCap?: null
    ): ChangeUnderlyingCapEventFilter;
    ChangeUnderlyingCap(newCap?: null): ChangeUnderlyingCapEventFilter;

    "Deposit(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): DepositEventFilter;
    Deposit(
      from?: string | null,
      to?: string | null,
      value?: null
    ): DepositEventFilter;

    "EnterBatchBurn(uint256,address,uint256)"(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): EnterBatchBurnEventFilter;
    EnterBatchBurn(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): EnterBatchBurnEventFilter;

    "ExecuteBatchBurn(uint256,address,uint256,uint256)"(
      round?: BigNumberish | null,
      executor?: string | null,
      shares?: null,
      amount?: null
    ): ExecuteBatchBurnEventFilter;
    ExecuteBatchBurn(
      round?: BigNumberish | null,
      executor?: string | null,
      shares?: null,
      amount?: null
    ): ExecuteBatchBurnEventFilter;

    "ExitBatchBurn(uint256,address,uint256)"(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): ExitBatchBurnEventFilter;
    ExitBatchBurn(
      round?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): ExitBatchBurnEventFilter;

    "Harvest(address,address[])"(
      account?: string | null,
      strategies?: null
    ): HarvestEventFilter;
    Harvest(account?: string | null, strategies?: null): HarvestEventFilter;

    "HarvestDelayUpdateScheduled(uint64)"(
      newHarvestDelay?: null
    ): HarvestDelayUpdateScheduledEventFilter;
    HarvestDelayUpdateScheduled(
      newHarvestDelay?: null
    ): HarvestDelayUpdateScheduledEventFilter;

    "HarvestDelayUpdated(address,uint64)"(
      account?: string | null,
      newHarvestDelay?: null
    ): HarvestDelayUpdatedEventFilter;
    HarvestDelayUpdated(
      account?: string | null,
      newHarvestDelay?: null
    ): HarvestDelayUpdatedEventFilter;

    "HarvestFeePercentUpdated(uint256)"(
      newFeePercent?: null
    ): HarvestFeePercentUpdatedEventFilter;
    HarvestFeePercentUpdated(
      newFeePercent?: null
    ): HarvestFeePercentUpdatedEventFilter;

    "HarvestFeeReceiverUpdated(address)"(
      receiver?: string | null
    ): HarvestFeeReceiverUpdatedEventFilter;
    HarvestFeeReceiverUpdated(
      receiver?: string | null
    ): HarvestFeeReceiverUpdatedEventFilter;

    "HarvestWindowUpdated(uint128)"(
      newHarvestWindow?: null
    ): HarvestWindowUpdatedEventFilter;
    HarvestWindowUpdated(
      newHarvestWindow?: null
    ): HarvestWindowUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StrategyDeposit(address,address,uint256)"(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null
    ): StrategyDepositEventFilter;
    StrategyDeposit(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null
    ): StrategyDepositEventFilter;

    "StrategyDistrusted(address)"(
      strategy?: string | null
    ): StrategyDistrustedEventFilter;
    StrategyDistrusted(strategy?: string | null): StrategyDistrustedEventFilter;

    "StrategyTrusted(address)"(
      strategy?: string | null
    ): StrategyTrustedEventFilter;
    StrategyTrusted(strategy?: string | null): StrategyTrustedEventFilter;

    "StrategyWithdrawal(address,address,uint256)"(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null
    ): StrategyWithdrawalEventFilter;
    StrategyWithdrawal(
      account?: string | null,
      strategy?: string | null,
      underlyingAmount?: null
    ): StrategyWithdrawalEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalQueueSet(address[])"(
      replacedWithdrawalQueue?: null
    ): WithdrawalQueueSetEventFilter;
    WithdrawalQueueSet(
      replacedWithdrawalQueue?: null
    ): WithdrawalQueueSetEventFilter;
  };

  estimateGas: {
    BASE_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    UNDERLYING_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auth(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchBurnBalance(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurnRound(overrides?: CallOverrides): Promise<BigNumber>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burningFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    burningFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimatedReturn(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalQueue(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    harvestWindow(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestExchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestIntervalInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStart(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvestWindowStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockedProfit(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchedBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnderlyingCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalFloat(overrides?: CallOverrides): Promise<BigNumber>;

    totalStrategyHoldings(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BLOCKS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNDERLYING_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBurnBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurnRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchBurns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burningFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burningFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateShares(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnderlying(
      sharesAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      to: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositIntoStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distrustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterBatchBurn(
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimatedReturn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitBatchBurn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStrategyData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalQueue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestWindow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      underlying_: string,
      auth_: string,
      harvestFeeReceiver_: string,
      burnFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvestExchangeRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHarvestIntervalInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHarvestWindowStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHarvestWindowStartBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLockedProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextHarvestDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuth(
      newAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchedBurningFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlocksPerYear(
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBurningFeeReceiver(
      burningFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestDelay(
      newHarvestDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestFeePercent(
      newFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestFeeReceiver(
      harvestFeeReceiver_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestWindow(
      newHarvestWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnderlyingCap(
      newCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalQueue(
      newQueue: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFloat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStrategyHoldings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerPause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustStrategy(
      strategy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBatchBurnReceipts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFromStrategy(
      strategy: string,
      underlyingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalQueue(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
